// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/impression_service.proto

package impression_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ImpressionService_TrackImpression_FullMethodName    = "/impression.ImpressionService/TrackImpression"
	ImpressionService_GetImpressionCount_FullMethodName = "/impression.ImpressionService/GetImpressionCount"
)

// ImpressionServiceClient is the client API for ImpressionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service de suivi des impressions
type ImpressionServiceClient interface {
	// Enregistrer une nouvelle impression
	TrackImpression(ctx context.Context, in *TrackImpressionRequest, opts ...grpc.CallOption) (*TrackImpressionResponse, error)
	// Obtenir le nombre d'impressions pour une publicité
	GetImpressionCount(ctx context.Context, in *GetImpressionCountRequest, opts ...grpc.CallOption) (*GetImpressionCountResponse, error)
}

type impressionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImpressionServiceClient(cc grpc.ClientConnInterface) ImpressionServiceClient {
	return &impressionServiceClient{cc}
}

func (c *impressionServiceClient) TrackImpression(ctx context.Context, in *TrackImpressionRequest, opts ...grpc.CallOption) (*TrackImpressionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackImpressionResponse)
	err := c.cc.Invoke(ctx, ImpressionService_TrackImpression_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *impressionServiceClient) GetImpressionCount(ctx context.Context, in *GetImpressionCountRequest, opts ...grpc.CallOption) (*GetImpressionCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetImpressionCountResponse)
	err := c.cc.Invoke(ctx, ImpressionService_GetImpressionCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImpressionServiceServer is the server API for ImpressionService service.
// All implementations must embed UnimplementedImpressionServiceServer
// for forward compatibility.
//
// Service de suivi des impressions
type ImpressionServiceServer interface {
	// Enregistrer une nouvelle impression
	TrackImpression(context.Context, *TrackImpressionRequest) (*TrackImpressionResponse, error)
	// Obtenir le nombre d'impressions pour une publicité
	GetImpressionCount(context.Context, *GetImpressionCountRequest) (*GetImpressionCountResponse, error)
	mustEmbedUnimplementedImpressionServiceServer()
}

// UnimplementedImpressionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedImpressionServiceServer struct{}

func (UnimplementedImpressionServiceServer) TrackImpression(context.Context, *TrackImpressionRequest) (*TrackImpressionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackImpression not implemented")
}
func (UnimplementedImpressionServiceServer) GetImpressionCount(context.Context, *GetImpressionCountRequest) (*GetImpressionCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImpressionCount not implemented")
}
func (UnimplementedImpressionServiceServer) mustEmbedUnimplementedImpressionServiceServer() {}
func (UnimplementedImpressionServiceServer) testEmbeddedByValue()                           {}

// UnsafeImpressionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImpressionServiceServer will
// result in compilation errors.
type UnsafeImpressionServiceServer interface {
	mustEmbedUnimplementedImpressionServiceServer()
}

func RegisterImpressionServiceServer(s grpc.ServiceRegistrar, srv ImpressionServiceServer) {
	// If the following call pancis, it indicates UnimplementedImpressionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ImpressionService_ServiceDesc, srv)
}

func _ImpressionService_TrackImpression_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackImpressionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImpressionServiceServer).TrackImpression(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImpressionService_TrackImpression_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImpressionServiceServer).TrackImpression(ctx, req.(*TrackImpressionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImpressionService_GetImpressionCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImpressionCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImpressionServiceServer).GetImpressionCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImpressionService_GetImpressionCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImpressionServiceServer).GetImpressionCount(ctx, req.(*GetImpressionCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImpressionService_ServiceDesc is the grpc.ServiceDesc for ImpressionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImpressionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "impression.ImpressionService",
	HandlerType: (*ImpressionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TrackImpression",
			Handler:    _ImpressionService_TrackImpression_Handler,
		},
		{
			MethodName: "GetImpressionCount",
			Handler:    _ImpressionService_GetImpressionCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/impression_service.proto",
}
