// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: ad_service.proto

// Espace de noms pour les messages et services

package ad_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdService_CreateAd_FullMethodName             = "/ad.v1.AdService/CreateAd"
	AdService_GetAd_FullMethodName                = "/ad.v1.AdService/GetAd"
	AdService_ServeAd_FullMethodName              = "/ad.v1.AdService/ServeAd"
	AdService_GetImpressionCount_FullMethodName   = "/ad.v1.AdService/GetImpressionCount"
	AdService_IncrementImpressions_FullMethodName = "/ad.v1.AdService/IncrementImpressions"
	AdService_ResetImpressions_FullMethodName     = "/ad.v1.AdService/ResetImpressions"
	AdService_DeleteExpired_FullMethodName        = "/ad.v1.AdService/DeleteExpired"
	AdService_ListAds_FullMethodName              = "/ad.v1.AdService/ListAds"
)

// AdServiceClient is the client API for AdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service principal de gestion des publicités
type AdServiceClient interface {
	CreateAd(ctx context.Context, in *CreateAdRequest, opts ...grpc.CallOption) (*AdResponse, error)
	GetAd(ctx context.Context, in *GetAdRequest, opts ...grpc.CallOption) (*AdResponse, error)
	ServeAd(ctx context.Context, in *ServeAdRequest, opts ...grpc.CallOption) (*ServeAdResponse, error)
	GetImpressionCount(ctx context.Context, in *GetImpressionCountRequest, opts ...grpc.CallOption) (*GetImpressionCountResponse, error)
	IncrementImpressions(ctx context.Context, in *IncrementImpressionsRequest, opts ...grpc.CallOption) (*IncrementImpressionsResponse, error)
	ResetImpressions(ctx context.Context, in *ResetImpressionsRequest, opts ...grpc.CallOption) (*ResetImpressionsResponse, error)
	DeleteExpired(ctx context.Context, in *DeleteExpiredRequest, opts ...grpc.CallOption) (*DeleteExpiredResponse, error)
	ListAds(ctx context.Context, in *ListAdsRequest, opts ...grpc.CallOption) (*ListAdsResponse, error)
}

type adServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdServiceClient(cc grpc.ClientConnInterface) AdServiceClient {
	return &adServiceClient{cc}
}

func (c *adServiceClient) CreateAd(ctx context.Context, in *CreateAdRequest, opts ...grpc.CallOption) (*AdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdResponse)
	err := c.cc.Invoke(ctx, AdService_CreateAd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adServiceClient) GetAd(ctx context.Context, in *GetAdRequest, opts ...grpc.CallOption) (*AdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdResponse)
	err := c.cc.Invoke(ctx, AdService_GetAd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adServiceClient) ServeAd(ctx context.Context, in *ServeAdRequest, opts ...grpc.CallOption) (*ServeAdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServeAdResponse)
	err := c.cc.Invoke(ctx, AdService_ServeAd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adServiceClient) GetImpressionCount(ctx context.Context, in *GetImpressionCountRequest, opts ...grpc.CallOption) (*GetImpressionCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetImpressionCountResponse)
	err := c.cc.Invoke(ctx, AdService_GetImpressionCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adServiceClient) IncrementImpressions(ctx context.Context, in *IncrementImpressionsRequest, opts ...grpc.CallOption) (*IncrementImpressionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IncrementImpressionsResponse)
	err := c.cc.Invoke(ctx, AdService_IncrementImpressions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adServiceClient) ResetImpressions(ctx context.Context, in *ResetImpressionsRequest, opts ...grpc.CallOption) (*ResetImpressionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetImpressionsResponse)
	err := c.cc.Invoke(ctx, AdService_ResetImpressions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adServiceClient) DeleteExpired(ctx context.Context, in *DeleteExpiredRequest, opts ...grpc.CallOption) (*DeleteExpiredResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteExpiredResponse)
	err := c.cc.Invoke(ctx, AdService_DeleteExpired_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adServiceClient) ListAds(ctx context.Context, in *ListAdsRequest, opts ...grpc.CallOption) (*ListAdsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAdsResponse)
	err := c.cc.Invoke(ctx, AdService_ListAds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdServiceServer is the server API for AdService service.
// All implementations must embed UnimplementedAdServiceServer
// for forward compatibility.
//
// Service principal de gestion des publicités
type AdServiceServer interface {
	CreateAd(context.Context, *CreateAdRequest) (*AdResponse, error)
	GetAd(context.Context, *GetAdRequest) (*AdResponse, error)
	ServeAd(context.Context, *ServeAdRequest) (*ServeAdResponse, error)
	GetImpressionCount(context.Context, *GetImpressionCountRequest) (*GetImpressionCountResponse, error)
	IncrementImpressions(context.Context, *IncrementImpressionsRequest) (*IncrementImpressionsResponse, error)
	ResetImpressions(context.Context, *ResetImpressionsRequest) (*ResetImpressionsResponse, error)
	DeleteExpired(context.Context, *DeleteExpiredRequest) (*DeleteExpiredResponse, error)
	ListAds(context.Context, *ListAdsRequest) (*ListAdsResponse, error)
	mustEmbedUnimplementedAdServiceServer()
}

// UnimplementedAdServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdServiceServer struct{}

func (UnimplementedAdServiceServer) CreateAd(context.Context, *CreateAdRequest) (*AdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAd not implemented")
}
func (UnimplementedAdServiceServer) GetAd(context.Context, *GetAdRequest) (*AdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAd not implemented")
}
func (UnimplementedAdServiceServer) ServeAd(context.Context, *ServeAdRequest) (*ServeAdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServeAd not implemented")
}
func (UnimplementedAdServiceServer) GetImpressionCount(context.Context, *GetImpressionCountRequest) (*GetImpressionCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImpressionCount not implemented")
}
func (UnimplementedAdServiceServer) IncrementImpressions(context.Context, *IncrementImpressionsRequest) (*IncrementImpressionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementImpressions not implemented")
}
func (UnimplementedAdServiceServer) ResetImpressions(context.Context, *ResetImpressionsRequest) (*ResetImpressionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetImpressions not implemented")
}
func (UnimplementedAdServiceServer) DeleteExpired(context.Context, *DeleteExpiredRequest) (*DeleteExpiredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExpired not implemented")
}
func (UnimplementedAdServiceServer) ListAds(context.Context, *ListAdsRequest) (*ListAdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAds not implemented")
}
func (UnimplementedAdServiceServer) mustEmbedUnimplementedAdServiceServer() {}
func (UnimplementedAdServiceServer) testEmbeddedByValue()                   {}

// UnsafeAdServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdServiceServer will
// result in compilation errors.
type UnsafeAdServiceServer interface {
	mustEmbedUnimplementedAdServiceServer()
}

func RegisterAdServiceServer(s grpc.ServiceRegistrar, srv AdServiceServer) {
	// If the following call pancis, it indicates UnimplementedAdServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdService_ServiceDesc, srv)
}

func _AdService_CreateAd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdServiceServer).CreateAd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdService_CreateAd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdServiceServer).CreateAd(ctx, req.(*CreateAdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdService_GetAd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdServiceServer).GetAd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdService_GetAd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdServiceServer).GetAd(ctx, req.(*GetAdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdService_ServeAd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServeAdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdServiceServer).ServeAd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdService_ServeAd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdServiceServer).ServeAd(ctx, req.(*ServeAdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdService_GetImpressionCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImpressionCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdServiceServer).GetImpressionCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdService_GetImpressionCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdServiceServer).GetImpressionCount(ctx, req.(*GetImpressionCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdService_IncrementImpressions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementImpressionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdServiceServer).IncrementImpressions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdService_IncrementImpressions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdServiceServer).IncrementImpressions(ctx, req.(*IncrementImpressionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdService_ResetImpressions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetImpressionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdServiceServer).ResetImpressions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdService_ResetImpressions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdServiceServer).ResetImpressions(ctx, req.(*ResetImpressionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdService_DeleteExpired_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExpiredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdServiceServer).DeleteExpired(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdService_DeleteExpired_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdServiceServer).DeleteExpired(ctx, req.(*DeleteExpiredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdService_ListAds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdServiceServer).ListAds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdService_ListAds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdServiceServer).ListAds(ctx, req.(*ListAdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdService_ServiceDesc is the grpc.ServiceDesc for AdService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ad.v1.AdService",
	HandlerType: (*AdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAd",
			Handler:    _AdService_CreateAd_Handler,
		},
		{
			MethodName: "GetAd",
			Handler:    _AdService_GetAd_Handler,
		},
		{
			MethodName: "ServeAd",
			Handler:    _AdService_ServeAd_Handler,
		},
		{
			MethodName: "GetImpressionCount",
			Handler:    _AdService_GetImpressionCount_Handler,
		},
		{
			MethodName: "IncrementImpressions",
			Handler:    _AdService_IncrementImpressions_Handler,
		},
		{
			MethodName: "ResetImpressions",
			Handler:    _AdService_ResetImpressions_Handler,
		},
		{
			MethodName: "DeleteExpired",
			Handler:    _AdService_DeleteExpired_Handler,
		},
		{
			MethodName: "ListAds",
			Handler:    _AdService_ListAds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ad_service.proto",
}
